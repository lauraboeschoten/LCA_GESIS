---
title: "Lab part 2: Political activisim in Greece"
author: "DL Oberski & L Boeschoten"
format: 
  html:
    theme: zephyr
    toc: true
    code-tools: true
    code-link: true
editor: visual
execute:
  cache: true
---

### Classification quality

In Lab 2, we continue with the model we created in Lab 1. You can continue in your previous script with the four class model, or run the following code:

```{r, message=FALSE, warning=FALSE}
set.seed(202303)

library(tidyverse)
library(broom)
library(haven)
library(poLCA)
library(ggplot2)

ess_greece <- read_csv("https://lauraboeschoten.github.io/LCA_GESIS/Extra/Day_2/ess_greece.csv.gz") 
ess_greece <- na.omit(ess_greece)

form_activism <- cbind(contplt, wrkprty, wrkorg, 
                       badge, sgnptit, pbldmn, bctprd) ~ 1

fit <- poLCA(form_activism, 
             data = ess_greece, 
             nclass = 4, 
             nrep = 20, verbose = FALSE)
```

**Question 1**

Create a data frame with the posterior class memberships and predicted class has the actual classification (predclass is the "modal assignment")

Use the four-class model as the selected model

```{r}
posteriors <- data.frame(post = fit$posterior,
                         predclass = fit$predclass)

classification_table <- posteriors %>% 
  group_by(predclass) %>% 
  summarize(across(starts_with("post."), ~ sum(.x)))

classification_table <- classification_table[,-1] |> as.matrix()

# Adopt the notation X=true latent class, W=assigned class
colnames(classification_table) <- paste0("X=", 1:4)
rownames(classification_table) <- paste0("W=", 1:4)

classification_table %>% round(1)
```

With column proportions:

```{r}
classification_table |>
  prop.table(2) |> 
  round(3)
```

**Question 2**

Calculate classification errors from classification table.

```{r}
1 - sum(diag(classification_table)) / sum(classification_table)
```

**Question 3**

And now calculate the Entropy $R^2$.

```{r}
entropy <- function(p) sum(-p * log(p))

error_prior <- entropy(fit$P) # Class proportions
error_post <- mean(apply(fit$posterior, 1, entropy))
(R2_entropy  <- (error_prior - error_post) / error_prior) # 0.741
```

### Including covariates

**Question 4**

Now fit the four-class model, but include covariates that predict the class membership. Class membership is predicted by gender and a quadratic age effect.

We also use the results from the model without covariates as starting values for the solution.

This is where the analyzed data would have been different if we had not already deleted all cases with at least one missing value above using `na.omit`. In practice this may lead to trouble, especially when there are many variables.

```{r}
form_activism <- cbind(contplt, wrkprty, wrkorg, 
                       badge, sgnptit, pbldmn, bctprd) ~ 
  gndr + agea + I(agea^2)

ess_greece_poly <- ess_greece %>% 
  mutate(agea = scale(agea))

fit_covariates <-  
  poLCA(form_activism, 
        data = ess_greece_poly, nclass = 4, 
        probs.start = fit$probs, 
        verbose = FALSE, nrep = 50, maxiter = 3e3)
```

**Question 5**

Confirm that the results now include a multinomial regression coefficients in a model predicting class membership.

```{r}
fit_covariates
```

**Question 6**

Check if the solution has changed now that covariates are included.

```{r}
tidy(fit_covariates) %>% 
  filter(outcome == 2) %>% 
  mutate(class = as.factor(class)) %>%
  ggplot(aes(variable, estimate, group = class, color = class)) +
  geom_point() + geom_line() + 
  geom_errorbar(aes(ymin = estimate - 2*std.error, 
                    ymax = estimate + 2*std.error), width = 0.2) +
  theme_bw() + scale_color_brewer(palette = "Set2")
```

**Question 7**

Plot the results of the multinomial model

```{r}
library(dplyr)
library(ggplot2)
library(tidyr)

# Extract posterior probabilities of each class
posterior_df <- as.data.frame(fit_covariates$posterior)

# Add covariates to the dataset
posterior_df <- ess_greece_poly %>%
  dplyr::select(gndr, agea) %>%
  bind_cols(posterior_df)

# Rename class probability columns
colnames(posterior_df)[3:ncol(posterior_df)] <- paste0("Class_", 1:4)

# Convert gender to factor for plotting
posterior_df$gndr <- as.factor(posterior_df$gndr)

```

```{r}
# Reshape data to long format for ggplot
posterior_long <- posterior_df %>%
  pivot_longer(cols = starts_with("Class_"), 
               names_to = "Class", values_to = "Probability")

# Plot probability of class membership as a function of age
ggplot(posterior_long, aes(x = agea, y = Probability, color = Class)) +
  geom_smooth(method = "loess", se = TRUE) +
  labs(title = "Effect of Age on Class Membership",
       x = "Age", y = "Probability of Class Membership") +
  theme_minimal()

ggplot(posterior_long, aes(x = gndr, y = Probability, fill = Class)) +
  geom_bar(stat = "summary", fun = "mean", position = "dodge") +
  labs(title = "Effect of Gender on Class Membership",
       x = "Gender", y = "Mean Probability of Class Membership") +
  theme_minimal()
```
